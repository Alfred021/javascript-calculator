{"version":3,"sources":["button-data.js","components/calculator-body.js","components/App.js","reportWebVitals.js","index.js"],"names":["numbers","value","id","name","Result","result","KeyPad","handleClick","map","number","class","element","onClick","type","className","App","useState","display","setDisplay","decimalAllowed","setDecimalAllowed","displayValue","calculate","parseMultiplicationSeparatedExpression","expression","split","noStr","Number","reduce","acc","no","parseFloat","parseDivisionSeparatedExpression","initialValue","slice","parseMinusSeparatedExpression","e","target","startsWith","includes","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73c52d29.chunk.js","sourcesContent":["const numbers = [\r\n    [\r\n    {value: 1, id: \"one\"}, {value: 2, id: \"two\"}, {value: 3, id: \"three\"}, {name: \"+\", id: \"add\"}\r\n    ], \r\n    [\r\n    {value: 4, id: \"four\"}, {value: 5, id: \"five\"}, {value: 6, id: \"six\"}, {name: \"-\", id: \"subtract\"}\r\n    ], \r\n    [\r\n    {value: 7, id: \"seven\"}, {value: 8, id: \"eight\"}, {value: 9, id: \"nine\"}, {name: \"*\", id: \"multiply\"}\r\n    ],\r\n    [\r\n    {value: 0, id: \"zero\"}, {name: \".\", id:\"decimal\"}, {name:\"=\", id: \"equals\"}, {name: \"/\", id:\"divide\"}\r\n    ],\r\n    [\r\n      {name: \"AC\", id:\"clear\"}, {name: \"CE\", id: \"clear-last\"}\r\n    ]\r\n    ];\r\n\r\nexport default numbers    \r\n","import numbers from '../button-data.js';\r\nimport '../css/App.css';\r\n\r\nexport const Result = ({result}) => {\r\n    return (\r\n        <p id=\"display\">{result}</p>\r\n    )\r\n  }\r\nexport const KeyPad = ({handleClick}) => {\r\n    return (\r\n      <>\r\n      {numbers.map(number => \r\n      <div class=\"row\">\r\n      <div class=\"d-sm-block\">\r\n      {number.map(element => \r\n       <button onClick={handleClick} type=\"button\" \r\n       className={element.value >= 0 || element.name === \".\" ? \"btn btn-primary btn-lg\" : element.name !== \"AC\" && element.name !== \"CE\" ? \"btn btn-secondary btn-lg\" : \"btn btn-danger btn-lg\"\r\n  }\r\n       id={element.id} name={element.name} value={element.value}>\r\n  {element.value >= 0 ? element.value : element.name}</button>\r\n      )}\r\n      </div>\r\n      </div>\r\n      )}\r\n     </>   \r\n    )\r\n  }\r\n","import React, { useState} from 'react';\r\nimport { Result, KeyPad } from './calculator-body.js';\r\nimport '../css/App.css';\r\n\r\nconst App = () => {\r\n  const [display, setDisplay] = useState(0);\r\n  const [decimalAllowed, setDecimalAllowed] = useState(true)\r\n  let displayValue = \"\" + display\r\n  \r\n  const calculate = () => {\r\n     const parseDivisionSeparatedExpression = (expression) => { \r\n    const numbersString = expression.split(\"/\")\r\n    const numbers = numbersString.map(noStr => Number(noStr));\r\n    const result = numbers.reduce((acc, no) => \r\n    parseFloat(acc) / parseFloat(no));\r\n    return result;\r\n}\r\n // both / *\r\nconst parseMultiplicationSeparatedExpression = (expression) => {\r\n\tconst numbersString = expression.split('*');\r\n\tconst numbers = numbersString.map(noStr => parseDivisionSeparatedExpression(noStr));\r\n\tconst initialValue = 1.0;\r\n\tconst result = numbers.reduce((acc, no) => \r\nparseFloat(acc) * parseFloat(no), initialValue);\r\n\treturn result;\r\n};\r\n\r\n// both / * -\r\nconst parseMinusSeparatedExpression = (expression) => {\r\n\tconst numbersString = expression.split('-');\r\n\tconst numbers = numbersString.map(noStr => parseMultiplicationSeparatedExpression(noStr));\r\n\tconst initialValue = numbers[0];\r\n\tconst result = numbers.slice(1).reduce((acc, no) => \r\n  parseFloat(acc) - parseFloat(no), initialValue);\r\n\treturn result;\r\n};\r\n\r\n// / * - +\r\n\tconst numbersString = displayValue.split('+');\r\n\tconst numbers = numbersString.map(noStr => parseMinusSeparatedExpression(noStr));\r\n\tconst initialValue = 0.0;\r\n\tconst result = numbers.reduce((acc, no) => \r\n  parseFloat(acc) + parseFloat(no), initialValue);\r\n     return result\r\n  }\r\n  \r\n  const handleClick = (e) => {\r\n    if (e.target.name === \"AC\") {\r\n      setDecimalAllowed(true)\r\n      setDisplay(0)\r\n    }\r\n    \r\n    if (e.target.value) {\r\n      displayValue = display + e.target.value\r\n      setDisplay(displayValue)\r\n    }\r\n    \r\n    if (e.target.name === '.' && decimalAllowed) {\r\n      displayValue += e.target.name\r\n      setDisplay(displayValue)\r\n      setDecimalAllowed(false)\r\n    }\r\n    \r\n    if (displayValue.startsWith(\"0\") && !displayValue.includes(\".\")) {\r\n      displayValue = e.target.value\r\n      setDisplay(displayValue)\r\n    }\r\n    \r\n    if (e.target.name === \"+\" || e.target.name === \"-\" || e.target.name === \"*\" || e.target.name === \"/\") { \r\n      setDecimalAllowed(true)\r\n      displayValue += e.target.name\r\n      setDisplay(displayValue)\r\n    }\r\n      \r\n    if (e.target.name === \"=\") {\r\n      setDisplay(calculate())    \r\n    }\r\n    \r\n    if (displayValue.includes(\"*-\") && e.target.name === \"=\") {\r\n\tconst numbersString = displayValue.split('*');\r\n\tconst numbers = numbersString.map(noStr => Number(noStr));\r\n\tconst initialValue = 1.0;\r\n\tconst result = numbers.reduce((acc, no) => \r\nparseFloat(acc) * parseFloat(no), initialValue);\r\n  setDisplay(result)\r\n    }\r\n    \r\n    if (displayValue.includes(\"*-+\") && e.target.name === \"=\") {\r\n      \r\n\tconst numbersString = displayValue.split('*-');\r\n\tconst numbers = numbersString.map(noStr => Number(noStr));\r\n\tconst initialValue = 0.0;\r\n\tconst result = numbers.reduce((acc, no) => \r\n  parseFloat(acc) + parseFloat(no), initialValue);\r\n     setDisplay(result)\r\n    }\r\n\r\n    if (displayValue.includes(\"/-\") && e.target.name === \"=\") {\r\n      \tconst numbersString = displayValue.split('/');\r\n\tconst numbers = numbersString.map(noStr => Number(noStr));\r\n\tconst result = numbers.reduce((acc, no) => \r\n  parseFloat(acc) / parseFloat(no));\r\n     setDisplay(result)\r\n    }\r\n    \r\n    if (e.target.name === \"CE\" && displayValue.length) {\r\n      setDisplay(displayValue.slice(0, -1))\r\n    }\r\n  }\r\n  \r\n  return (\r\n     <div className=\"container-fluid\">\r\n    <div class=\"card\">\r\n  <div class=\"card-body\">\r\n     <h5 class=\"card-title text-center\">React Calculator</h5>\r\n    <Result result={display}/>\r\n    <KeyPad handleClick={handleClick}/>\r\n  </div>\r\n</div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}